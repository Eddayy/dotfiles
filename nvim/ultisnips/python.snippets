priority -50

#! header
snippet shebang "Shebang header for python scripts" b
#!/usr/bin/env python
# coding: utf-8
$0
endsnippet

snippet main "ifmain" b
if __name__ == '__main__':
	$0
endsnippet

########################################
# Class & Special Method Name Snippets #
########################################

snippet class "simple class definition" b
class ${1:${VISUAL:Foo}}(${2:object}):
	def __init__(self):
		pass
endsnippet

# TODO contextmanager
snippet context "context manager methods" b
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
endsnippet


snippet attr "methods for customizing attribute access" b
def __getattr__(self, name):
	${1:pass}

def __setattr__(self, name, value):
	${2:pass}

def __delattr__(self, name):
	${3:pass}
endsnippet


snippet descriptors "methods implementing descriptors" b
def __get__(self, instance, owner):
	${1:pass}

def __set__(self, instance, value):
	${2:pass}

def __delete__(self, instance):
	${3:pass}
endsnippet


snippet repr "methods implementing string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:pass}

def __unicode__(self):
	${3:pass}
endsnippet

##########################
# Try / Except / Finally #
##########################

snippet trye "Try / Except / Else" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "Try / Except / Finally" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally" b
try:
	${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

######################
# Assertions & Tests #
######################

# TODO asserts.equal
snippet ae "Assert equal" b
self.assertEqual(${1:${VISUAL:first}},${2:second})
endsnippet

snippet """ "triple quoted string (double quotes)" b
"""
${1:${VISUAL:doc}}
"""
endsnippet

# vim:ft=snippets:
